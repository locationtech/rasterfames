# Vector Data

RasterFrames provides a variety of ways to work with spatial vector (points, lines, and polygons) data alongside raster data. There is a convenience DataSource for GeoJSON format, as well as the ability to convert from [GeoPandas][GeoPandas] to Spark. Representation of vector geometries in pyspark is through [Shapely][Shapely] which provides a great deal of flexibility. RasterFrames also provides access to Spark functions for working with geometries.

## GeoJSON DataSource

```python, echo=False
import pyrasterframes
from pyrasterframes.utils import create_rf_spark_session
spark = create_rf_spark_session()
```

```python
from pyspark import SparkFiles
spark.sparkContext.addFile('https://raw.githubusercontent.com/datasets/geo-admin1-us/master/data/admin1-us.geojson')

df = spark.read.geojson(SparkFiles.get('admin1-us.geojson'))
df.printSchema()
```

The properties of each feature are available as columns of the DataFrame, along with the geometry.

## GeoPandas and RasterFrames

You can also convert a [GeoPandas][GeoPandas] GeoDataFrame to a Spark DataFrame, preserving the geometry column. This means that any vector format that can be read with [OGR][OGR] can be converted to a Spark DataFrame. In the example below, we expect the same schema as `df` defined above by the GeoJSON reader. Note that in a geopandas DataFrame there can be heterogeneous geometry types in the column, but this may fail Spark's schema inference.

```python
import geopandas
from shapely.geometry import MultiPolygon

def poly_or_mp_to_mp(g):
    """ Normalize polygons or multipolygons to all be multipolygons. """
    if isinstance(g, MultiPolygon):
        return g
    else:
        return MultiPolygon([g])

gdf = geopandas.read_file('https://raw.githubusercontent.com/datasets/geo-admin1-us/master/data/admin1-us.geojson')
gdf.geometry = gdf.geometry.apply(poly_or_mp_to_mp)
df2 = spark.createDataFrame(gdf)
df2.printSchema()
```

## Shapely Geometry Support

The geometry column will have a Spark user-defined type that is compatible with [Shapely][Shapely] when working on the Python side. This means that when the data is collected to the driver, it will be a Shapely geometry object.

```python
the_first = df.first()
print(type(the_first['geometry']))
```

Since it is a geometry we can do things like this.

```python
the_first['geometry'].wkt
```

You can also write user-defined functions that input geometries, output geometries, or both, via user defined types in the [geomesa_pyspark.types](https://github.com/locationtech/rasterframes/blob/develop/pyrasterframes/src/main/python/geomesa_pyspark/types.py) module. Here is a simple example using both a geometry input and output. The example is repeated below with a built-in function.

```python
from pyspark.sql.functions import udf
from geomesa_pyspark.types import PointUDT

@udf(PointUDT())
def get_centroid(g):
    return g.centroid

df = df.withColumn('naive_centroid', get_centroid(df.geometry))
df.printSchema()
```

We can take a look at a sample of the data. Notice the geometry columns print as well known text.

```python
df.show(4)
```


## GeoMesa Functions and Spatial Relations

As documented in the @ref:[function reference](reference.md), the various user-defined functions already available through GeoMesa are available for use. The example above is logically equivalent but less efficient than this.


```python
from pyrasterframes.rasterfunctions import st_centroid
df = df.withColumn('centroid', st_centroid(df.geometry))
df.select('name', 'geometry', 'naive_centroid', 'centroid').show(4)
```

The RasterFrames vector functions and GeoMesa functions also provide a variety of spatial relations that are useful in combination with the geometric properties of projected rasters. In this example we use the @ref:[built-in MODIS catalog](raster-catalogs.md#using-built-in-experimental-catalogs) which provides an extent. We will convert the extent to a polygon and filter only those within approximately 500 km of a selected point.

```python, evaluate=True
from pyrasterframes.rasterfunctions import st_geometry, st_bufferPoint, st_intersects, st_point
from pyspark.sql.functions import lit
l8 = spark.read.format('aws-pds-l8-catalog').load()

l8 = l8.withColumn('geom', st_geometry(l8.bounds_wgs84))
l8 = l8.withColumn('paducah', st_point(lit(-88.6275), lit(37.072222)))

l8_filtered = l8.filter(st_intersects(l8.geom, st_bufferPoint(l8.paducah, lit(500000.0))))
```

```python, evaluate=False, echo=False
# suppressed due to run time.
l8_filtered.count()
```


[GeoPandas]: http://geopandas.org
[OGR]: https://gdal.org/drivers/vector/index.html
[Shapely]: https://shapely.readthedocs.io/en/latest/manual.html
